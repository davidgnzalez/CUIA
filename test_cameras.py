import cv2

def test_cameras():
    print("üé• Detectando c√°maras disponibles...")
    
    available_cameras = []
    camera_info = {}
    
    # Probar √≠ndices del 0 al 10
    for i in range(11):
        cap = cv2.VideoCapture(i)
        if cap.isOpened():
            ret, frame = cap.read()
            if ret:
                height, width = frame.shape[:2]
                resolution = width * height
                camera_info[i] = {'width': width, 'height': height, 'resolution': resolution}
                available_cameras.append(i)
                print(f"üìπ C√°mara {i}: {width}x{height} ({resolution} p√≠xeles)")
                
                # Mostrar preview por 2 segundos
                cv2.imshow(f"Camera {i} Preview", frame)
                cv2.waitKey(2000)
                cv2.destroyAllWindows()
            cap.release()
        else:
            print(f"‚ùå C√°mara {i}: NO DISPONIBLE")
    
    print(f"\n‚úÖ C√°maras disponibles: {available_cameras}")
    
    # üéØ MOSTRAR QU√â C√ÅMARA SELECCIONAR√çA EL SISTEMA
    if available_cameras:
        if 2 in available_cameras:
            selected = 2
            reason = "DroidCam detectado en √≠ndice 2 (PRIORIDAD)"
        elif len(available_cameras) > 1:
            non_zero = [i for i in available_cameras if i != 0]
            if non_zero:
                selected = max(non_zero, key=lambda x: camera_info[x]['resolution'])
                reason = f"mayor resoluci√≥n ({camera_info[selected]['resolution']} p√≠xeles)"
            else:
                selected = 0
                reason = "√∫nica opci√≥n disponible"
        else:
            selected = available_cameras[0]
            reason = "√∫nica c√°mara disponible"
        
        print(f"üéØ ARCar Showroom usar√°: C√°mara {selected} ({reason})")
        
        if selected == 2:
            print("‚úÖ PERFECTO: DroidCam ser√° usada autom√°ticamente")
        else:
            print("‚ö†Ô∏è NOTA: DroidCam no detectada, usando fallback")
    
    return available_cameras

if __name__ == "__main__":
    test_cameras()